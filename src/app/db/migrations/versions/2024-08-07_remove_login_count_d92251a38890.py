# type: ignore
"""remove login count

Revision ID: d92251a38890
Revises: a22cc7704d14
Create Date: 2024-08-07 16:20:03.181964+00:00

"""
from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = 'd92251a38890'
down_revision = 'a22cc7704d14'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.create_index('ix_role_slug_unique', ['slug'], unique=True)

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.create_index('ix_tag_slug_unique', ['slug'], unique=True)

    with op.batch_alter_table('team', schema=None) as batch_op:
        batch_op.create_index('ix_team_slug_unique', ['slug'], unique=True)

    with op.batch_alter_table('user_account', schema=None) as batch_op:
        batch_op.create_table_comment(
        'User accounts for application access',
        existing_comment=None
    )
        batch_op.drop_column('login_count')

    with op.batch_alter_table('user_account_oauth', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Registered OAUTH2 Accounts for Users',
        existing_comment=None
    )

    with op.batch_alter_table('user_account_role', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Links a user to a specific role.',
        existing_comment=None
    )

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_account_role', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Links a user to a specific role.'
    )

    with op.batch_alter_table('user_account_oauth', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Registered OAUTH2 Accounts for Users'
    )

    with op.batch_alter_table('user_account', schema=None) as batch_op:
        batch_op.add_column(sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_table_comment(
        existing_comment='User accounts for application access'
    )

    with op.batch_alter_table('team', schema=None) as batch_op:
        batch_op.drop_index('ix_team_slug_unique')

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_index('ix_tag_slug_unique')

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_index('ix_role_slug_unique')

    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
